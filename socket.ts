import { io, type Socket } from "socket.io-client";
import Cookies from "js-cookie";

class SocketManager {
  private socket: Socket | null = null;
  private listeners: Map<string, Function[]> = new Map();

  connect() {
    if (this.socket?.connected) return this.socket;

    const token = Cookies.get("acto_token");

    this.socket = io("https://acto-0gf5.onrender.com", {
      transports: ["websocket", "polling"],
      timeout: 20000,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
    });

    this.socket.on("connect", () => {
      console.log("‚úÖ Connected to ACTO server");

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (token) {
        this.socket?.emit("authenticate", { token });
      }
    });

    this.socket.on("authenticated", (data) => {
      if (data.success) {
        console.log("üîê Socket authenticated successfully");
      } else {
        console.error("üö® Socket authentication failed:", data.message);
      }
    });

    this.socket.on("disconnect", (reason) => {
      console.log("‚ùå Disconnected from server:", reason);
    });

    this.socket.on("connect_error", (error) => {
      console.error("üö® Connection error:", error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    this.socket.on("new-message", (data) => {
      this.emit("new-message", data);
    });

    this.socket.on("chat-created", (data) => {
      this.emit("chat-created", data);
    });

    this.socket.on("users-online", (data) => {
      this.emit("users-online", data);
    });

    this.socket.on("user-typing", (data) => {
      this.emit("user-typing", data);
    });

    this.socket.on("user-joined-chat", (data) => {
      this.emit("user-joined-chat", data);
    });

    this.socket.on("user-left-chat", (data) => {
      this.emit("user-left-chat", data);
    });

    return this.socket;
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
    this.listeners.clear();
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on(event: string, callback: Function) {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, []);
    }
    this.listeners.get(event)!.push(callback);
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  off(event: string, callback?: Function) {
    if (!callback) {
      this.listeners.delete(event);
      return;
    }

    const callbacks = this.listeners.get(event);
    if (callbacks) {
      const index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    }
  }

  // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  private emit(event: string, data: any) {
    const callbacks = this.listeners.get(event);
    if (callbacks) {
      callbacks.forEach((callback) => callback(data));
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  send(event: string, data?: any) {
    if (this.socket?.connected) {
      this.socket.emit(event, data);
    }
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
  joinChat(chatId: string) {
    this.send("join-chat", { chatId });
  }

  // –ü–æ–∫–∏–¥–∞–Ω–∏–µ —á–∞—Ç–∞
  leaveChat(chatId: string) {
    this.send("leave-chat", { chatId });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—á–∞—Ç–∞–Ω–∏–∏
  startTyping(chatId: string) {
    this.send("typing", { chatId, isTyping: true });
  }

  stopTyping(chatId: string) {
    this.send("typing", { chatId, isTyping: false });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  get isConnected() {
    return this.socket?.connected || false;
  }
}

export const socketManager = new SocketManager();
export default socketManager;
